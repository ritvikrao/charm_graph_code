mainmodule sssp_smp
{
  extern module htram_group;
  readonly CProxy_Main mainProxy;
  readonly CProxy_SsspChares arr;
  readonly CProxy_SharedInfo shared;
  readonly int N;
  readonly long V;
  readonly int M;
  readonly long average_degree;
  readonly int S;
  readonly long num_global_edges;
  readonly int generate_mode;
  readonly cost lmax;
  readonly int buffer_size;
  readonly int histo_bucket_count;
  readonly int initial_threshold;
  readonly double reduction_delay;
  readonly double flush_timer;
  readonly bool enable_buffer_flushing;
  readonly CProxy_HTram tram_proxy;
  readonly CProxy_processHeapShared process_heap_shared;
  mainchare Main
  {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void begin(cost max_sum); //wait for all chares to receive graph partition, register qd callback here (callback to done method), start algorithm
    entry void quiescence_detected(); //bcast to chares to print distances
    entry [reductiontarget, expedited] void reduce_histogram(long histo_values[N], int histo_length);
    entry [reductiontarget] void done(long msg_stats[N], int N); //bcast to chares to print results and end program
    entry [reductiontarget] void check_buffer_done(long msg_stats[N], int N);
    entry [reductiontarget] void done_max_cost(cost max_cost);
  };
  array [1D] SsspChares
  {
    entry SsspChares(CProxy_HTram htram);
    entry void initiate_pointers();
    entry [whenidle] bool idle_triggered();
    entry void generate_2d_graph(long partition[dividers], int dividers);
    entry void generate_local_graph(long _num_vertices, long _num_edges, long partition[dividers], int dividers);
    entry void get_graph(LongEdge edges[E], long E, long partition[dividers], int dividers); //gets graph partition
    entry void start_papi();
    entry void start_algo(Update new_vertex_and_distance);
    entry void process_heap();
    entry void process_update(Update new_vertex_and_distance); //receives an updated vertex num and distance, and calls this method on neighbor chares
    entry void check_buffer(); // checks for false quiescence
    entry [expedited] void contribute_histogram(int behind_first_nonzero); //contributes histogram to main pe
    entry void keep_going(); // flush buffers
    entry void clear_pq_hold();
    entry void current_thresholds(int _heap_threshold, int _tram_threshold, int _bfs_threshold, int behind_first_nonzero, int phase); // broadcast bucket limit
    entry void print_distances(); // print out the distances on each chare
    entry void stop_periodic_flush();
    entry void get_max_cost(); // get max cost as correctness check
  };
  group SharedInfo
  {
    entry SharedInfo();
    entry void max_path_value(cost max_path_val);
  };
  nodegroup processHeapShared
  {
    entry processHeapShared();
    entry void processHeapOtherCaller(int low, int high, int send_chare, int bucket, intptr_t whole_bucket_pointer, long data_count, intptr_t local_graph_pointer, long vertex_count, long startVertex);
  };

};
